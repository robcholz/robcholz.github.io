[{"title":"[Foundation] Applied Electronics","date":"2025-09-29T01:13:00.000Z","path":"2025/09/29/applied-electronics/","text":"[Foundation] Applied Electronics1. Resistor1.1 Voltage DivisionResistors can be connected in series to divide voltage, commonly used for ADC inputs or op-amp biasing. Consider the resistance ratio and ADC resolution when designing a divider. If low quiescent current is required, the divider’s output impedance increases, which affects accuracy: The ADC’s internal sampling capacitor may not fully charge. The measured voltage may have error due to the RC time constant. When measuring high currents, use a high-power resistor to handle heat dissipation. 1.2 Current LimitingUsed to limit current to safe levels. Typical use cases: LED current control, MOSFET gate protection, transistor base drive. 1.3 Pull-Up / Pull-DownUsed to define a stable logic level on floating pins (e.g., MCU inputs, I²C lines). Provides source current for open-drain/open-collector circuits. Typical resistance ranges: I²C: 2.2k–400kΩ (commonly 4.7k–10kΩ) MCU GPIO: ~10kΩ When low-power operation is critical, choose higher resistance to reduce quiescent current. 1.4 Stabilization / DampingUsed to isolate and stabilize signal lines. Known as isolation resistors or damping resistors. Reduces ringing, EMI, and cross-coupling on high-speed or sensitive traces. 2. Capacitor2.1 Filtering / DecouplingUsed to smooth voltage and suppress high-frequency noise. Place as close as possible to IC power pins. Typical range: 0.01 µF – 100 µF. Pay attention to ESR (Equivalent Series Resistance) and stability. 2.2 Timing / OscillatorUsed in RC or LC timing and oscillator circuits. Time constant: τ = R × C Consider tolerance, temperature drift, and leakage current when selecting values. 2.3 Coupling / AC BlockingUsed to pass AC signals while blocking DC bias. Common in audio and amplifier stages. Choose capacitors with appropriate voltage ratings and low distortion. 2.4 Bypass / Noise ReductionUsed to shunt high-frequency noise and improve signal integrity. Small ceramic capacitors (e.g., 0.01 µF, 0.1 µF) are placed close to active components. Use multiple capacitors in parallel (e.g., 0.1 µF + 10 µF) to cover a wide frequency range. 2.5 Energy Storage / PulsingUsed to store and release energy for short bursts. Common in power supplies and motor drivers. Use large electrolytics or supercapacitors with sufficient voltage and ripple current ratings. 2.6 Snubber / DampingUsed to suppress voltage spikes, ringing, and protect switches. Typically RC series networks. Values depend on transient energy, switching frequency, and load characteristics.","link":"","tags":[{"name":"ece","slug":"ece","permalink":"https://robcholz.github.io/tags/ece/"},{"name":"framework","slug":"framework","permalink":"https://robcholz.github.io/tags/framework/"}]},{"title":"[Foundation] LCEDA","date":"2025-09-21T21:57:00.000Z","path":"2025/09/21/lcdea/","text":"[Foundation] LCEDAQuick Action Hide Selected Traces: Command+R Component Distribute By Region: Shift+P Select trace: selected tracing + Shift + W Steps Hide all traces. Distribute component by region. Hide all designators. Import DXF board. Start the layout.","link":"","tags":[{"name":"ece","slug":"ece","permalink":"https://robcholz.github.io/tags/ece/"},{"name":"framework","slug":"framework","permalink":"https://robcholz.github.io/tags/framework/"},{"name":"software","slug":"software","permalink":"https://robcholz.github.io/tags/software/"}]},{"title":"[Foundation]  PCB Layout Guidelines","date":"2025-09-20T21:51:00.000Z","path":"2025/09/20/pcb-layout/","text":"[Foundation] PCB Layout Guidelines1. BackgroundTrace Width vs Current (1 oz Copper) Current Typical Trace Width Notes GPIO / Low current 6 mil Standard signal width 0.5 A 10 mil Suitable for LEDs, small sensors 1 A 20 mil 2 A 40 mil 5 A 100 mil 10 A 200 mil Use solder mask opening and tin coverage 50 A 500 mil 100 A 1000 mil 200 A 2000 mil 500 A 5000 mil Use ≥4.5 oz copper or bus bars For high-current paths, widen the trace, increase copper thickness, or apply solder coverage. Additional Notes On compact boards, silkscreen reference designators can be omitted. Follow the 3W rule for high-speed signal integrity:→ Distance between traces ≥ 3× trace width. 2. Layer Stack and Net AllocationTwo-Layer Board Bottom layer should be as continuous GND plane as possible. Four-Layer Board Options Type Stackup Characteristics Type 1 GND / SIG-1 / SIG-2 / PWR Simple, but discontinuous impedance Type 2 SIG-1 / PWR / GND / SIG-2 Good for top-side components or signals Type 3 SIG-1 / GND / PWR / SIG-2 Good for bottom-side components 3. Layout ProcessEMC Improvement20H Rule Shrink the PWR plane by: 20 mil → reduces electric field by ~70% 100 mil → reduces electric field by ~98% Recommended Workflow Place mechanically constrained components first (USB, connectors, mounting holes). Plan functional regions: power, digital, analog. Route critical or high-speed signals first. Add fanout vias for low-current power nets. Complete all routing. Optimize critical traces (short, direct, orthogonal). Add teardrops and copper pour. Refine and balance copper planes. Run DRC checks, verify silkscreen and text orientation. Export Gerber, Pick &amp; Place, and BOM files. 4. Component Placement and RoutingGeneral Align designators consistently (e.g., all facing same direction). Quartz Crystal Guard crystal traces with a 10 mil GND ring. Do not route as differential pairs. Place as close as possible to MCU pins. Maintain a solid GND plane beneath. USB 2.0 Interface D+/D− are differential pairs (~90 Ω differential impedance). No copper pour or vias underneath pair. Add bidirectional TVS diode across D+/D−. Add unidirectional TVS diode across VBUS and GND. Ensure trace widths and planes handle expected VBUS current. Ground Domains Separate AGND, DGND, and PGND to minimize interference. Connect via: Single point (star ground), or Capacitive coupling between domains. Domain Recommendation AGND Close to analog reference voltage, filters, and amplifiers DGND Near digital ICs and loads PGND For high-current or power circuits; connect to star point or via capacitor DC-DC Converter Keep SW and FB traces as short as possible. Isolate inductor from analog and high-speed regions. Surround with GND via fence to confine EMI. Place input/output capacitors close to pins — from bulk → ceramic. Check chip’s thermal resistance (°C/W) and ensure adequate copper area or vias for heat dissipation. SDRAM DesignSingle SDRAM Point-to-point routing. Place close to MCU/BGA (600–800 mil without resistors; 800–1000 mil with). Decoupling capacitors must be adjacent to power pins. Dual SDRAM Place symmetrically relative to CPU. Prefer both on the same layer if space allows; otherwise, top/bottom mirrored. Maintain same routing length as single SDRAM layout. Routing Notes Target impedance ≈ 50 Ω. Keep each 9-bit group (D0–D7 + LDQM, D8–D15 + HDQM) on one layer. Maintain ≥3W spacing or 20 mil between data, address, and clock lines. Add GND guard traces (15–30 mil) where possible. Length-match tolerances: Data lines: ±50 mil Addr/Ctrl/Clock: ±100 mil TF (MicroSD) Card Speed Impedance Requirement ≤ 25 MHz ~50 Ω single-ended &gt; 25 MHz ~95 Ω differential","link":"","tags":[{"name":"ece","slug":"ece","permalink":"https://robcholz.github.io/tags/ece/"},{"name":"framework","slug":"framework","permalink":"https://robcholz.github.io/tags/framework/"}]},{"title":"[Foundation] Setup CLion with STM32CubeMX project for STM32 Development on macOS","date":"2023-01-22T03:52:00.000Z","path":"2023/01/22/clion-dev-macos/","text":"Setup CLion with STM32CubeMX project for STM32 Development on macOSKeil is very easy to handle for embedded development but might not have some functionalities such as code completion and inlay hint. This would trouble you especially when you want to conduct a big project. IDEs by Jetbrains like Intellij and Pycharm are very popular in the market. They have many advantages including charming UIs, good usability, safe refactoring. Doubtlessly, their IDEs could greatly assist your coding works. CLion is a cross-platform IDE for C/C++ development by Jetbrains, and I will guide you to setup a basic development environment for STM32 with CLion in this tutorial. ToolsSoftware A computer with macOS(for sure) CLion STM32CubeMX Homebrew Hardware STM32 MCU ST-Link/J-Link InstallationsPrerequisitesCLion The version should be higher than 2019.2. STM32CubeMX Downloading requires email verification. After you unzip the downloaded file, right-click the STM32CubeMX package and click Show Package Contents and right click to open the executable file inside the package. There will be an error window popped up. Click Cancel. Open Security &amp; Privacy in System Preferences and click Allow Anyway. Open STM32CubeMX executable file again in the package and click Open. Install STM32CubeMX. Homebrew Validate the installation brew -v. You should have installed these tools above before you continue the next step. ARM Toolchain Run brew tap ArmMbed/homebrew-formulae and brew install arm-none-eabi-gcc in the terminal. Validate the installation: arm-none-eabi-gcc -v. OpenOCDbrew install open-ocd Validate the installation: openocd -v. CLion ConfigurationsOpenOCD &amp; STM32CubeMX Paths Generally, both of your OpenOCD and CubeMX locations should be as same as me. Remember to test your paths by clicking Test. Toolchains Set build tools, C/C++ compilers and debuggers. You should use Bundled GDB or like me, manually set another GDB path for Debugger option. Create a new STM32CubeMX project. Here, you can either click Use to choose a board type or click Skip to choose one later. Click Open with STM32CubeMX to open the application. The default MCU is STM32F030F4Px. You can use STM32CubeMX like what you do everyday. You have to select STM32CubeIDe in Toolchain / IDE setting, and the Project Name should be kept as same as the project name in CLion. After you generate code and overwrite the old project files, click Assist and choose a board type in Run/Debug Configurations. You also need to edit the board config file in accordance to the version of your ST-Link. Congrats! You can now build, upload, and debug in CLion.","link":"","tags":[{"name":"ece","slug":"ece","permalink":"https://robcholz.github.io/tags/ece/"},{"name":"framework","slug":"framework","permalink":"https://robcholz.github.io/tags/framework/"},{"name":"software","slug":"software","permalink":"https://robcholz.github.io/tags/software/"}]},{"title":"This blog has been established","date":"2022-09-25T06:55:10.000Z","path":"2022/09/25/blog-post-title-from-file-name/","text":"This blog has been establishedBlog establishment","link":"","tags":[]}]